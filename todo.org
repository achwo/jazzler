* [#C] Refactoring
** find a way to remove the need of whitelisting the tests in travis
** TODO [#C] in chord, rename :chord to :degree
** TODO [#C] decouple from overtone
** TODO [#C] in key / mode, change format :C3 to :C, as semantically better
** TODO [#C] make test-helper module for useful functions, 
   like overtone-format-test.chord?
** TODO move helpers in player_test to test_helpers
** TODO fix bar creating helper function to have the correct beat numbers
** TODO use standardized usage style / pre-/ post-conditions
** reduce dependencies (i.e. for jazzler.repl.io) by injecting it 
   from system
** write tests for jazzler.repl.states (after io is injected, since
   testing side effects sucks
** move commands list from commands to system and inject?
   reason: is configuration
** remove assoc statements everywhere, let the defining modules do it
** remove duplication between song_commands and commands (command fn)
** remove duplication between each song_command function
** parser.system: exceptions on the parsers?
** find out, how to allow mix case in instaparse, for modes (parser)
** find a standard location for song transformation
*** i.e. scale is completely transformed in transformer
    but title is partially transformed in song_commands
*** also, scale-value transformation uses functions in song.clj for
    string conversion
** with figdef, the structure from song_command is broken
*** it is not in the commands list
*** it does not parse it's own stuff, but instead unknown does it
*** possible solution (not so beautiful): keyword for definition
**** i.e. fig Figure = [I]
* [#B] Research
** DONE [#C] what are the correct terms for
*** key / mode: scale = {root mode}, i.e. C Ionian
*** elements of bar
*** TODO key (~ mode) and key (map) are ambiguous, what to do? 
* [#A] Features
** TODO Elaborate REPL
*** TODO draw state diagram
*** save and load file
*** close file
*** new song
*** when song open: grammar rules
*** undo and redo
** better errors in REPL
** abstract loop for playback / etc. in "song-time" in REPL
** TODO song mode functions
*** song: string representation of the song
*** key: set key (also in parser)
*** bpm: set bpm (also in parser)
*** play, stop
*** save, load, close
*** redo, undo
** more modes for scales
** in repl, do not print an error if command is empty
* [#A] Architecture
** TODO [#B] In Repl: have a server in the background
*** it takes commands of the repl, but standardized
    example: incoming is a string progression
    before the server, it gets
**** identified as a progression
**** enhanced by information, that it is a progression
**** then send to the server
**** the returning value is sent back to the client
**** maybe stripped by the enhanced information at the start
** TODO make transformations SOLID
*** one function per transformation
*** composable via ->
* [#B] Workflow
** TODO [#B] Switch files faster in emacs
** TODO [#C] Add lein-ancient to check for outdated deps
** TODO [#B] check out clj-refactor
** TODO [#C] learn to use magit for emacs
* Bugfixing
** TODO in grammar, allow umlauts, ÃŸ, and maybe punctuation chars to title
** TODO [#A] in repl, when entering a wrong command, it crashes with nullpointer
** TODO [#A] add duration and beat fields to chords
*** Also, the error message that results is very bad!
**** TODO Add better error handling, possible through preconditions!
** TODO in grammar, allow indentation and generally more whitespace
** TODO in grammar, allow numbers, uppercase, dashes in figure names
** in grammar, allow mix case for mode
** in states.clj:song, trim the prompt to a maximum length
   
